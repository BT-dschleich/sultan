{
  "name": "Sultan",
  "tagline": "Command and Rule over your Shell",
  "body": "# Sultan\r\n\r\n**Command and Rule over your Shell**\r\n\r\n[![Build Status](https://travis-ci.org/aeroxis/sultan.svg?branch=master)](https://travis-ci.org/aeroxis/sultan)\r\n\r\n**NOTE 1:** Sultan only supports Python `2.7.x`.\r\n\r\n**NOTE 2:** Your input is welcome! Please provide your feedback by creating \r\n[issues on Github](https://github.com/aeroxis/sultan/issues).\r\n\r\n<img src=\"https://raw.githubusercontent.com/aeroxis/sultan/master/img/sultan-logo.png\" alt=\"sultan logo\" align=\"right\" />\r\n\r\n## What is Sultan?\r\nSultan is an interface to Bash from Python. Shell commands get to the point of \r\nwhat you want them to do. For example, \r\n\r\n```bash\r\nsudo yum install tree\r\n```\r\n\r\nwould install `tree` on your local machine. However, we normally access command \r\nline utilities like `yum`, via bash, and Bash is just not as nice as Python. \r\nPython's beautiful syntax make code readable and easy to maintain far more than\r\nBash.\r\n\r\nBash is great for small scripts, but when we get complex scripts, Bash just \r\ngets very tough to use. This is why Sultan was created.\r\n\r\n# Basic Usage\r\n\r\nSultan allows you to run bash commands from inside Python using simple function \r\ncalls. Here is a quick example to install tree via Sultan.\r\n\r\n```python\r\nfrom sultan.api import Sultan\r\n\r\ndef install_tree():\r\n    s = Sultan()\r\n    s.sudo(\"yum install -y tree\").run()\r\n```\r\n\r\nHere is the output:\r\n\r\n```bash\r\nsudo yum install -y tree;\r\nLoaded plugins: fastestmirror, langpacks\r\nLoading mirror speeds from cached hostfile\r\n * epel: ca.mirror.babylon.network\r\n * nux-dextop: mirror.li.nux.ro\r\nResolving Dependencies\r\n--> Running transaction check\r\n---> Package tree.x86_64 0:1.6.0-10.el7 will be installed\r\n--> Finished Dependency Resolution\r\n\r\nDependencies Resolved\r\n\r\n================================================================================\r\n Package      Arch           Version                Repository             Size\r\n================================================================================\r\nInstalling:\r\n tree         x86_64         1.6.0-10.el7           CentOS-7-Base          46 k\r\n\r\nTransaction Summary\r\n================================================================================\r\nInstall  1 Package\r\n\r\nTotal download size: 46 k\r\nInstalled size: 87 k\r\nDownloading packages:\r\nRunning transaction check\r\nRunning transaction test\r\nTransaction test succeeded\r\nRunning transaction\r\n  Installing : tree-1.6.0-10.el7.x86_64                                     1/1 \r\n  Verifying  : tree-1.6.0-10.el7.x86_64                                     1/1 \r\n\r\nInstalled:\r\n  tree.x86_64 0:1.6.0-10.el7                                                    \r\n\r\nComplete!\r\n\r\n```\r\n\r\n## Advanced Usage \r\n\r\nThe following are advanced usage of Sultan:\r\n\r\n### Pipe\r\n\r\nIn bash, we'd like to pipe multiple commands to take the output of the first\r\ncommand and send it to the second command. For example, suppose we want to \r\nfind all the files that contain the word `Sultan` in a bunch of files in a \r\ngiven directory. We would do this:\r\n\r\n```bash\r\nfind ~/projects/sultan -name \"*.py\" | xargs grep \"Sultan\"\r\n```\r\n\r\nWe would do the following with Sultan:\r\n\r\n```python\r\ns = Sultan()\r\nresponse = s.find(\"~/projects/sultan -name '*.py'\").pipe().grep(\"Sultan\").run()\r\n```\r\n\r\n### And\r\n\r\nIn bash, we'd like to run two commands together, like changing to a directory \r\nand running a command there, like:\r\n\r\n```bash\r\ncd /tmp/ && ls -lah\r\n``` \r\n\r\nWe would do the following with Sultan:\r\n\r\n```python\r\ns = Sultan()\r\nresponse = s.cd(\"/tmp\").and_().ls(\"-lah\")\r\n```\r\n\r\n### Redirect\r\n\r\nIn bash, something we do a lot is redirect output (`stdout`, `stderr`) into a \r\nfile. We would do it like this:\r\n\r\n```bash\r\nfind / -type d > /tmp/contents\r\n```\r\n\r\nWe would do the following with Sultan:\r\n\r\n```python\r\ns = Sultan()\r\nresponse = s.find(\"/ -type d\").redirect(\"/tmp/contents\", stdout=True)\r\n```\r\n\r\n### Custom commands\r\n\r\nSultan still needs a lot of work and we understand that. We encourage you to \r\ncreate bug reports and feature requests on the Github page at: \r\n[https://github.com/aeroxis/sultan/issues](https://github.com/aeroxis/sultan/issues)\r\n\r\nThat being said, if you want to do something custom, run:\r\n\r\n```python\r\ns = Sultan()\r\ns.command = \"yum install -y gcc\"\r\nresponse = s.run()\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}